generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  profilePicture String?
  role           UserRole
  
  // For residents - which specific PG they belong to
  pgCommunityId String?
  pgCommunity   PgCommunity? @relation("PgResidents", fields: [pgCommunityId], references: [id])
  
  // For PG owners - the PG communities they own
  ownedPgCommunities PgCommunity[] @relation("PgOwnerCommunities")

  // Issues and services raised by this user (residents)
  raisedIssues      RaisedIssue[]
  requestedServices RequestedService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PgCommunity {
  id          String @id @default(cuid())
  name        String
  address     String
  description String?
  
  // Unique PG code for residents to use during signup
  pgCode      String @unique
  
  // Who owns this PG
  ownerId String
  owner   User   @relation("PgOwnerCommunities", fields: [ownerId], references: [id])
  
  // Residents in this PG
  residents User[] @relation("PgResidents")
  
  // Issues and services for this specific PG
  issues   RaisedIssue[]
  services RequestedService[]
  
  // Technicians available for this PG
  technicians TechnicianPgAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Technician {
  id          String          @id @default(cuid())
  name        String
  phoneNumber String
  speciality  TechnicianField
  isAvailable Boolean         @default(true)

  // Many-to-many relationship with PG communities
  pgAssignments TechnicianPgAssignment[]
  
  assignedIssues   RaisedIssue[]
  assignedServices RequestedService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Junction table for Technician-PG relationships
model TechnicianPgAssignment {
  id String @id @default(cuid())
  
  technicianId String
  technician   Technician @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  
  pgCommunityId String
  pgCommunity   PgCommunity @relation(fields: [pgCommunityId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  
  @@unique([technicianId, pgCommunityId])
}

model RaisedIssue {
  id            String        @id @default(cuid())
  ticketNumber  Int           @unique @default(autoincrement())
  title         String
  description   String
  issueType     IssueType
  priorityLevel PriorityLevel
  status        IssueStatus   @default(PENDING)
  location      String
  imageUrls     String[]

  // Who raised this issue (resident)
  raisedById String
  raisedBy   User   @relation(fields: [raisedById], references: [id])

  // Which PG community this belongs to
  pgCommunityId String
  pgCommunity   PgCommunity @relation(fields: [pgCommunityId], references: [id])

  assignedTechnicianId String?
  assignedTechnician   Technician? @relation(fields: [assignedTechnicianId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?
}

model RequestedService {
  id            String        @id @default(cuid())
  ticketNumber  Int           @unique @default(autoincrement())
  title         String
  description   String
  serviceType   ServiceType
  priorityLevel PriorityLevel
  status        ServiceStatus @default(PENDING)
  location      String

  isApprovedByOwner Boolean @default(false)
  ownerComment      String?
  rejectionReason   String?

  // Who requested this service (resident)
  requestedById String
  requestedBy   User   @relation(fields: [requestedById], references: [id])

  // Which PG community this belongs to
  pgCommunityId String
  pgCommunity   PgCommunity @relation(fields: [pgCommunityId], references: [id])

  assignedTechnicianId String?
  assignedTechnician   Technician? @relation(fields: [assignedTechnicianId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  approvedAt  DateTime?
  completedAt DateTime?
}

enum UserRole {
  PG_OWNER
  RESIDENT
}

enum TechnicianField {
  PLUMBING
  ELECTRICAL
  CARPENTRY
  CLEANING
  PAINTING
  AC_REPAIR
  APPLIANCE_REPAIR
  GENERAL_MAINTENANCE
}

enum IssueType {
  PLUMBING
  ELECTRICAL
  HEATING_COOLING
  CLEANING
  SECURITY
  INTERNET_WIFI
  APPLIANCE
  STRUCTURAL
  PEST_CONTROL
  OTHER
}

enum ServiceType {
  CLEANING
  MAINTENANCE
  REPAIR
  INSTALLATION
  UPGRADE
  INSPECTION
  OTHER
}

enum PriorityLevel {
  P1 // Critical - Immediate attention
  P2 // High - Within 24 hours
  P3 // Medium - Within 3 days
  P4 // Low - Within a week
}

enum IssueStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  RESOLVED
}

enum ServiceStatus {
  PENDING
  AWAITING_APPROVAL
  APPROVED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  REJECTED
}